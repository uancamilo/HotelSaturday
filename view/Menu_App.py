from application.SecurityService import SecurityService
from application.SeedData import SeedData
from repository.conexion.DatabaseManager import DatabaseManager
from application.GuestInput import GuestInput
from application.GuestService import GuestService
from application.BedroomInput import BedroomInput
from application.EmployeeInput import EmployeeInput
from application.EmployeeService import EmployeeService
from application.BookingInput import BookingInput

class Menu_App:

    def __init__(self):
        self.db = DatabaseManager(host="localhost", port=3306, user="admin", password="admin", database="hotel_saturday")
        self.db.create_database_if_not_exists()
        self.db.connect()
        self.db.create_tables_if_not_exist()

        seeder = SeedData(self.db)
        seeder.run()

        # Nuevo: inicializar seguridad
        self.security_service = SecurityService(self.db)
        self.security_service.ensure_initial_users()

        # Instanciar inputs
        self.guest_input = GuestInput()
        self.guest_service = GuestService()
        self.bedroom_input = BedroomInput()
        self.employee_input = EmployeeInput()
        self.employee_service = EmployeeService()
        self.booking_input = BookingInput()

        self.logged_employee = None

    def init_app(self):
        while True:
            if not self.logged_employee:
                self.login()
                continue

            print(
                f"\n--- Men√∫ Principal Hotel Saturday --- (Usuario: {self.logged_employee.person.name} - Rol: {self.logged_employee.rol})")
            print("1. Gesti√≥n de Hu√©spedes")

            if self.logged_employee.rol == "superadmin":
                print("2. Registro de Empleado")

            print("3. Gesti√≥n de Habitaciones")
            print("4. Gesti√≥n de Reservas")
            print("5. Cerrar Sesi√≥n")
            print("6. Salir")
            print("------------------------------------")

            option_str = input("Seleccione una opci√≥n: ")
            if not option_str.isdigit():
                print("‚ùå Opci√≥n inv√°lida. Ingrese un n√∫mero.")
                continue
            try:
                option = int(option_str)
            except ValueError:
                print("‚ùå Entrada inv√°lida.")
                continue

            if option == 1:
                self.menu_huespedes()
            elif option == 2 and self.logged_employee.rol == "superadmin":
                self.register_employee()
            elif option == 3:
                self.menu_habitaciones()
            elif option == 4:
                self.menu_gestion_reservas()
            elif option == 5:
                self.logout()
            elif option == 6:
                self.exit_app()
                break
            else:
                print("‚ùå Opci√≥n no v√°lida.")

    def login(self):
        print("\n--- Iniciar Sesi√≥n ---")
        email = input("Email: ").strip()
        password = input("Contrase√±a: ").strip()

        employee = self.employee_service.validate_login(email, password, self.db)

        if employee:
            if employee.status == "inactive":
                print("‚ùå El usuario est√° inactivo. Contacte al administrador.")
                return
            self.logged_employee = employee
            print(f"‚úÖ Bienvenido {self.logged_employee.person.name} ({self.logged_employee.rol})")
        else:
            print("‚ùå Email o contrase√±a incorrectos.")

    def logout(self):
        print(f"\nüëã {self.logged_employee.person.name} ha cerrado sesi√≥n.")
        self.logged_employee = None

    def menu_huespedes(self):
        while True:
            print("\n--- Gesti√≥n de Hu√©spedes ---")
            print("1. Registrar Nuevo Hu√©sped")
            print("2. Listar Hu√©spedes")
            print("3. Volver al men√∫ principal")
            option_str = input("Seleccione una opci√≥n: ").strip()

            if not option_str.isdigit():
                print("‚ùå Opci√≥n inv√°lida.")
                continue

            option = int(option_str)

            if option == 1:
                self.register_guest()
            elif option == 2:
                self.list_guests()
            elif option == 3:
                print("Volviendo al men√∫ principal...")
                break
            else:
                print("‚ùå Opci√≥n no v√°lida.")

    def register_guest(self):
        print("\n--- Registro de Nuevo Hu√©sped ---")
        self.guest_input.register(self.db)

    def list_guests(self):
        print("\n--- Lista de Hu√©spedes ---")
        self.guest_service.listar_huespedes(self.db)

    def register_employee(self):
        print("\n--- Registro de Nuevo Empleado ---")

        if self.logged_employee.rol != "superadmin":
            print("‚ùå Solo un superadmin puede registrar empleados.")
            return

        # Preguntar rol del nuevo empleado
        print("\nSeleccione el rol del nuevo empleado:")
        print("1. Superadmin")
        print("2. Empleado normal")
        rol_option = input("Seleccione una opci√≥n: ")

        if rol_option not in ["1", "2"]:
            print("‚ùå Rol no v√°lido.")
            return

        if rol_option == "1":
            # Verificar si ya existe un superadmin
            query = "SELECT COUNT(*) FROM employee WHERE rol = 'superadmin'"
            result = self.db.execute_query(query)

            if result and result[0][0] >= 1:
                print("‚ùå Ya existe un Superadmin en el sistema. No se puede crear otro.")
                return

            rol = "superadmin"
        else:
            rol = "employee"

        # Continuar con el registro
        self.employee_input.register(self.db, rol)

    def menu_gestion_reservas(self):
        while True:
            print("\n--- Gesti√≥n de Reservas (Booking) ---")
            print("1. Crear Nueva Reserva")
            print("2. Ver Todas las Reservas")
            print("3. Buscar Reserva por ID")
            print("4. Cancelar Reserva")
            print("5. Volver al men√∫ principal")
            print("------------------------------------")
            option_str = input("Seleccione una opci√≥n: ")
            if not option_str.isdigit():
                print("‚ùå Opci√≥n inv√°lida.")
                continue
            try:
                option = int(option_str)
            except ValueError:
                print("‚ùå Entrada inv√°lida.")
                continue

            if option == 1:
                self.booking_input.create_booking_interactive(self.db)
            elif option == 2:
                self.booking_input.view_all_bookings(self.db)
            elif option == 3:
                self.booking_input.find_booking_interactive(self.db)
            elif option == 4:
                self.booking_input.cancel_booking_interactive(self.db)
            elif option == 5:
                print("Volviendo al men√∫ principal...")
                break
            else:
                print("‚ùå Opci√≥n no v√°lida.")

    def menu_habitaciones(self):
        while True:
            print("\n--- Gesti√≥n de Habitaciones ---")
            print("1. Crear habitaci√≥n")
            print("2. Listar habitaciones")
            print("3. Volver al men√∫ principal")
            print("-----------------------------")
            option_str = input("Seleccione una opci√≥n: ")
            try:
                option = int(option_str)
            except ValueError:
                option = 0

            if option == 1:
                self.create_bedroom()
            elif option == 2:
                self.list_bedrooms()
            elif option == 3:
                print("Volviendo al men√∫ principal...")
                break
            else:
                print("‚ùå Opci√≥n no v√°lida.")

    def create_bedroom(self):
        print("\n--- Crear Nueva Habitaci√≥n ---")
        self.bedroom_input.create_bedroom(self.db)

    def list_bedrooms(self):
        print("\n--- Listar Habitaciones ---")
        self.bedroom_input.list_bedrooms(self.db)

    def exit_app(self):
        print("\nCerrando la conexi√≥n con la base de datos...")
        self.db.disconnect()
        print("¬°Hasta luego!")

if __name__ == "__main__":
    print("Iniciando aplicaci√≥n Hotel Saturday...")
    app = Menu_App()
    try:
        app.init_app()
    except KeyboardInterrupt:
        print("\nSaliendo por solicitud del usuario...")
        app.exit_app()
    except Exception as e:
        print(f"\n‚ùå Ha ocurrido un error inesperado: {e}")
        if app.db and hasattr(app.db, 'connection') and app.db.connection and app.db.connection.is_connected():
            app.db.disconnect()
    finally:
        print("Aplicaci√≥n finalizada.")
